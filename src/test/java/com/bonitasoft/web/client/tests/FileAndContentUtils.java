package com.bonitasoft.web.client.tests;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.StringWriter;
import java.util.Date;
import java.util.Properties;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

import static com.bonitasoft.web.client.utils.FileUtils.readFully;
import static java.lang.String.format;
import static java.nio.charset.StandardCharsets.UTF_8;

public class FileAndContentUtils {

    public static byte[] zip(FileAndContent... files) throws IOException {
        final ByteArrayOutputStream baos = new ByteArrayOutputStream();
        final ZipOutputStream zos = new ZipOutputStream(baos);
        try {
            for (FileAndContent file : files) {
                ZipEntry e = new ZipEntry(file.getFileName());
                zos.putNextEntry(e);
                if (!e.isDirectory()) {
                    zos.write(file.getContent());
                }
                zos.flush();
                zos.closeEntry();
            }
        } finally {
            zos.close();
            baos.close();
        }
        return baos.toByteArray();
    }

    public static FileAndContent file(String fileName, String content) {
        return new FileAndContent(fileName, content.getBytes());
    }

    static FileAndContent directory(String fileName) {
        return new FileAndContent(fileName, null);
    }

    static FileAndContent file(String fileName, InputStream content) throws IOException {
        return new FileAndContent(fileName, readFully(content));
    }

    /**
     * Generates the bconf MANIFEST for you
     */
    // TODO groovyfy this!
    static byte[] bconf(FileAndContent... files) throws IOException {
        FileAndContent manifest = new FileAndContent("MANIFEST", arbitraryBconfManifest());
        FileAndContent[] bconfFiles = new FileAndContent[files.length + 1];

        bconfFiles[0] = manifest;
        for (int i = 0; i < files.length; i++) {
            bconfFiles[i + 1] = files[i];
        }
        return zip(bconfFiles);
    }

    private static byte[] arbitraryBconfManifest() throws IOException {
        Properties properties = new Properties();
        properties.put("builder.version", "7.8.1");
        properties.put("target.environment", "Production");
        final StringWriter stringWriter = new StringWriter();
        properties.store(stringWriter, format("Generated by %s on %s", FileAndContentUtils.class, new Date()));
        stringWriter.flush();
        return stringWriter.toString().getBytes(UTF_8);
    }

}
